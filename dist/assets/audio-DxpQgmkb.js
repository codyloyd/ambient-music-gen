import{T as c,o as h,P as p,r as u,F as vt,f as k,m as wt,S as l,G as r,c as v,a as F,M as ut,b as w,d as Dt,O as tt,A as pt,e as qt,W as kt,g as W,h as G,i as x,E as et,j as st,k as it,l as d,w as Tt,n as dt,p as Rt,q as Ft,s as At,I as nt,t as St,u as ot,v as Et,x as ft,y as R,z as Vt}from"./index-aHKq10kq.js";class f extends c{constructor(){const t=h(f.getDefaults(),arguments,["delayTime","maxDelay"]);super(t),this.name="Delay";const e=this.toSeconds(t.maxDelay);this._maxDelay=Math.max(e,this.toSeconds(t.delayTime)),this._delayNode=this.input=this.output=this.context.createDelay(e),this.delayTime=new p({context:this.context,param:this._delayNode.delayTime,units:"time",value:t.delayTime,minValue:0,maxValue:this.maxDelay}),u(this,"delayTime")}static getDefaults(){return Object.assign(c.getDefaults(),{delayTime:0,maxDelay:1})}get maxDelay(){return this._maxDelay}dispose(){return super.dispose(),this._delayNode.disconnect(),this.delayTime.dispose(),this}}class A extends vt{constructor(){super(...arguments),this.name="MidiClass",this.defaultUnits="midi"}_frequencyToUnits(t){return k(super._frequencyToUnits(t))}_ticksToUnits(t){return k(super._ticksToUnits(t))}_beatsToUnits(t){return k(super._beatsToUnits(t))}_secondsToUnits(t){return k(super._secondsToUnits(t))}toMidi(){return this.valueOf()}toFrequency(){return wt(this.toMidi())}transpose(t){return new A(this.context,this.toMidi()+t)}}class I extends l{constructor(){super(h(I.getDefaults(),arguments,["value"])),this.override=!1,this.name="Add",this._sum=new r({context:this.context}),this.input=this._sum,this.output=this._sum,this.addend=this._param,v(this._constantSource,this._sum)}static getDefaults(){return Object.assign(l.getDefaults(),{value:0})}dispose(){return super.dispose(),this._sum.dispose(),this}}class z extends F{constructor(){const t=h(z.getDefaults(),arguments,["min","max"]);super(t),this.name="Scale",this._mult=this.input=new ut({context:this.context,value:t.max-t.min}),this._add=this.output=new I({context:this.context,value:t.min}),this._min=t.min,this._max=t.max,this.input.connect(this.output)}static getDefaults(){return Object.assign(F.getDefaults(),{max:1,min:0})}get min(){return this._min}set min(t){this._min=t,this._setRange()}get max(){return this._max}set max(t){this._max=t,this._setRange()}_setRange(){this._add.value=this._min,this._mult.value=this._max-this._min}dispose(){return super.dispose(),this._add.dispose(),this._mult.dispose(),this}}class B extends F{constructor(){super(h(B.getDefaults(),arguments)),this.name="Zero",this._gain=new r({context:this.context}),this.output=this._gain,this.input=void 0,w(this.context.getConstant(0),this._gain)}dispose(){return super.dispose(),Dt(this.context.getConstant(0),this._gain),this}}class D extends c{constructor(){const t=h(D.getDefaults(),arguments,["frequency","min","max"]);super(t),this.name="LFO",this._stoppedValue=0,this._units="number",this.convert=!0,this._fromType=p.prototype._fromType,this._toType=p.prototype._toType,this._is=p.prototype._is,this._clampValue=p.prototype._clampValue,this._oscillator=new tt(t),this.frequency=this._oscillator.frequency,this._amplitudeGain=new r({context:this.context,gain:t.amplitude,units:"normalRange"}),this.amplitude=this._amplitudeGain.gain,this._stoppedSignal=new l({context:this.context,units:"audioRange",value:0}),this._zeros=new B({context:this.context}),this._a2g=new pt({context:this.context}),this._scaler=this.output=new z({context:this.context,max:t.max,min:t.min}),this.units=t.units,this.min=t.min,this.max=t.max,this._oscillator.chain(this._amplitudeGain,this._a2g,this._scaler),this._zeros.connect(this._a2g),this._stoppedSignal.connect(this._a2g),u(this,["amplitude","frequency"]),this.phase=t.phase}static getDefaults(){return Object.assign(tt.getDefaults(),{amplitude:1,frequency:"4n",max:1,min:0,type:"sine",units:"number"})}start(t){return t=this.toSeconds(t),this._stoppedSignal.setValueAtTime(0,t),this._oscillator.start(t),this}stop(t){return t=this.toSeconds(t),this._stoppedSignal.setValueAtTime(this._stoppedValue,t),this._oscillator.stop(t),this}sync(){return this._oscillator.sync(),this._oscillator.syncFrequency(),this}unsync(){return this._oscillator.unsync(),this._oscillator.unsyncFrequency(),this}_setStoppedValue(){this._stoppedValue=this._oscillator.getInitialValue(),this._stoppedSignal.value=this._stoppedValue}get min(){return this._toType(this._scaler.min)}set min(t){t=this._fromType(t),this._scaler.min=t}get max(){return this._toType(this._scaler.max)}set max(t){t=this._fromType(t),this._scaler.max=t}get type(){return this._oscillator.type}set type(t){this._oscillator.type=t,this._setStoppedValue()}get partials(){return this._oscillator.partials}set partials(t){this._oscillator.partials=t,this._setStoppedValue()}get phase(){return this._oscillator.phase}set phase(t){this._oscillator.phase=t,this._setStoppedValue()}get units(){return this._units}set units(t){const e=this.min,s=this.max;this._units=t,this.min=e,this.max=s}get state(){return this._oscillator.state}connect(t,e,s){return(t instanceof p||t instanceof l)&&(this.convert=t.convert,this.units=t.units),qt(this,t,e,s),this}dispose(){return super.dispose(),this._oscillator.dispose(),this._stoppedSignal.dispose(),this._zeros.dispose(),this._scaler.dispose(),this._a2g.dispose(),this._amplitudeGain.dispose(),this.amplitude.dispose(),this}}class Ot extends F{constructor(){super(...arguments),this.name="GainToAudio",this._norm=new kt({context:this.context,mapping:t=>Math.abs(t)*2-1}),this.input=this._norm,this.output=this._norm}dispose(){return super.dispose(),this._norm.dispose(),this}}class U extends W{constructor(){const t=h(U.getDefaults(),arguments);super(t),this.name="ModulationSynth",this._carrier=new G({context:this.context,oscillator:t.oscillator,envelope:t.envelope,onsilence:()=>this.onsilence(this),volume:-10}),this._modulator=new G({context:this.context,oscillator:t.modulation,envelope:t.modulationEnvelope,volume:-10}),this.oscillator=this._carrier.oscillator,this.envelope=this._carrier.envelope,this.modulation=this._modulator.oscillator,this.modulationEnvelope=this._modulator.envelope,this.frequency=new l({context:this.context,units:"frequency"}),this.detune=new l({context:this.context,value:t.detune,units:"cents"}),this.harmonicity=new ut({context:this.context,value:t.harmonicity,minValue:0}),this._modulationNode=new r({context:this.context,gain:0}),u(this,["frequency","harmonicity","oscillator","envelope","modulation","modulationEnvelope","detune"])}static getDefaults(){return Object.assign(W.getDefaults(),{harmonicity:3,oscillator:Object.assign(x(it.getDefaults(),[...Object.keys(st.getDefaults()),"frequency","detune"]),{type:"sine"}),envelope:Object.assign(x(et.getDefaults(),Object.keys(c.getDefaults())),{attack:.01,decay:.01,sustain:1,release:.5}),modulation:Object.assign(x(it.getDefaults(),[...Object.keys(st.getDefaults()),"frequency","detune"]),{type:"square"}),modulationEnvelope:Object.assign(x(et.getDefaults(),Object.keys(c.getDefaults())),{attack:.5,decay:0,sustain:1,release:.5})})}_triggerEnvelopeAttack(t,e){this._carrier._triggerEnvelopeAttack(t,e),this._modulator._triggerEnvelopeAttack(t,e)}_triggerEnvelopeRelease(t){return this._carrier._triggerEnvelopeRelease(t),this._modulator._triggerEnvelopeRelease(t),this}getLevelAtTime(t){return t=this.toSeconds(t),this.envelope.getValueAtTime(t)}dispose(){return super.dispose(),this._carrier.dispose(),this._modulator.dispose(),this.frequency.dispose(),this.detune.dispose(),this.harmonicity.dispose(),this._modulationNode.dispose(),this}}class V extends U{constructor(){super(h(V.getDefaults(),arguments)),this.name="AMSynth",this._modulationScale=new pt({context:this.context}),this.frequency.connect(this._carrier.frequency),this.frequency.chain(this.harmonicity,this._modulator.frequency),this.detune.fan(this._carrier.detune,this._modulator.detune),this._modulator.chain(this._modulationScale,this._modulationNode.gain),this._carrier.chain(this._modulationNode,this.output)}dispose(){return super.dispose(),this._modulationScale.dispose(),this}}class S extends c{constructor(){const t=h(S.getDefaults(),arguments,["frequency","type"]);super(t),this.name="BiquadFilter",this._filter=this.context.createBiquadFilter(),this.input=this.output=this._filter,this.Q=new p({context:this.context,units:"number",value:t.Q,param:this._filter.Q}),this.frequency=new p({context:this.context,units:"frequency",value:t.frequency,param:this._filter.frequency}),this.detune=new p({context:this.context,units:"cents",value:t.detune,param:this._filter.detune}),this.gain=new p({context:this.context,units:"decibels",convert:!1,value:t.gain,param:this._filter.gain}),this.type=t.type}static getDefaults(){return Object.assign(c.getDefaults(),{Q:1,type:"lowpass",frequency:350,detune:0,gain:0})}get type(){return this._filter.type}set type(t){d(["lowpass","highpass","bandpass","lowshelf","highshelf","notch","allpass","peaking"].indexOf(t)!==-1,`Invalid filter type: ${t}`),this._filter.type=t}getFrequencyResponse(t=128){const e=new Float32Array(t);for(let o=0;o<t;o++){const q=Math.pow(o/t,2)*19980+20;e[o]=q}const s=new Float32Array(t),i=new Float32Array(t),n=this.context.createBiquadFilter();return n.type=this.type,n.Q.value=this.Q.value,n.frequency.value=this.frequency.value,n.gain.value=this.gain.value,n.getFrequencyResponse(e,s,i),s}dispose(){return super.dispose(),this._filter.disconnect(),this.Q.dispose(),this.frequency.dispose(),this.gain.dispose(),this.detune.dispose(),this}}class H extends c{constructor(){const t=h(H.getDefaults(),arguments,["frequency","type","rolloff"]);super(t),this.name="Filter",this.input=new r({context:this.context}),this.output=new r({context:this.context}),this._filters=[],this._filters=[],this.Q=new l({context:this.context,units:"positive",value:t.Q}),this.frequency=new l({context:this.context,units:"frequency",value:t.frequency}),this.detune=new l({context:this.context,units:"cents",value:t.detune}),this.gain=new l({context:this.context,units:"decibels",convert:!1,value:t.gain}),this._type=t.type,this.rolloff=t.rolloff,u(this,["detune","frequency","gain","Q"])}static getDefaults(){return Object.assign(c.getDefaults(),{Q:1,detune:0,frequency:350,gain:0,rolloff:-12,type:"lowpass"})}get type(){return this._type}set type(t){d(["lowpass","highpass","bandpass","lowshelf","highshelf","notch","allpass","peaking"].indexOf(t)!==-1,`Invalid filter type: ${t}`),this._type=t,this._filters.forEach(s=>s.type=t)}get rolloff(){return this._rolloff}set rolloff(t){const e=dt(t)?t:parseInt(t,10),s=[-12,-24,-48,-96];let i=s.indexOf(e);d(i!==-1,`rolloff can only be ${s.join(", ")}`),i+=1,this._rolloff=e,this.input.disconnect(),this._filters.forEach(n=>n.disconnect()),this._filters=new Array(i);for(let n=0;n<i;n++){const o=new S({context:this.context});o.type=this._type,this.frequency.connect(o.frequency),this.detune.connect(o.detune),this.Q.connect(o.Q),this.gain.connect(o.gain),this._filters[n]=o}this._internalChannels=this._filters,v(this.input,...this._internalChannels,this.output)}getFrequencyResponse(t=128){const e=new S({frequency:this.frequency.value,gain:this.gain.value,Q:this.Q.value,type:this._type,detune:this.detune.value}),s=new Float32Array(t).map(()=>1);return this._filters.forEach(()=>{e.getFrequencyResponse(t).forEach((n,o)=>s[o]*=n)}),e.dispose(),s}dispose(){return super.dispose(),this._filters.forEach(t=>{t.dispose()}),Tt(this,["detune","frequency","gain","Q"]),this.frequency.dispose(),this.Q.dispose(),this.detune.dispose(),this.gain.dispose(),this}}class Mt extends c{constructor(t){super(t),this.name="ToneAudioWorklet",this.workletOptions={},this.onprocessorerror=Rt;const e=URL.createObjectURL(new Blob([Ft()],{type:"text/javascript"})),s=this._audioWorkletName();this._dummyGain=this.context.createGain(),this._dummyParam=this._dummyGain.gain,this.context.addAudioWorkletModule(e).then(()=>{this.disposed||(this._worklet=this.context.createAudioWorkletNode(s,this.workletOptions),this._worklet.onprocessorerror=this.onprocessorerror.bind(this),this.onReady(this._worklet))})}dispose(){return super.dispose(),this._dummyGain.disconnect(),this._worklet&&(this._worklet.port.postMessage("dispose"),this._worklet.disconnect()),this}}class $ extends Mt{constructor(){const t=h($.getDefaults(),arguments,["delayTime","resonance"]);super(t),this.name="FeedbackCombFilter",this.input=new r({context:this.context}),this.output=new r({context:this.context}),this.delayTime=new p({context:this.context,value:t.delayTime,units:"time",minValue:0,maxValue:1,param:this._dummyParam,swappable:!0}),this.resonance=new p({context:this.context,value:t.resonance,units:"normalRange",param:this._dummyParam,swappable:!0}),u(this,["resonance","delayTime"])}_audioWorkletName(){return At}static getDefaults(){return Object.assign(c.getDefaults(),{delayTime:.1,resonance:.5})}onReady(t){v(this.input,t,this.output);const e=t.parameters.get("delayTime");this.delayTime.setParam(e);const s=t.parameters.get("feedback");this.resonance.setParam(s)}dispose(){return super.dispose(),this.input.dispose(),this.output.dispose(),this.delayTime.dispose(),this.resonance.dispose(),this}}class X extends c{constructor(){const t=h(X.getDefaults(),arguments,["frequency","type"]);super(t),this.name="OnePoleFilter",this._frequency=t.frequency,this._type=t.type,this.input=new r({context:this.context}),this.output=new r({context:this.context}),this._createFilter()}static getDefaults(){return Object.assign(c.getDefaults(),{frequency:880,type:"lowpass"})}_createFilter(){const t=this._filter,e=this.toFrequency(this._frequency),s=1/(2*Math.PI*e);if(this._type==="lowpass"){const i=1/(s*this.context.sampleRate),n=i-1;this._filter=this.context.createIIRFilter([i,0],[1,n])}else{const i=1/(s*this.context.sampleRate)-1;this._filter=this.context.createIIRFilter([1,-1],[1,i])}this.input.chain(this._filter,this.output),t&&this.context.setTimeout(()=>{this.disposed||(this.input.disconnect(t),t.disconnect())},this.blockTime)}get frequency(){return this._frequency}set frequency(t){this._frequency=t,this._createFilter()}get type(){return this._type}set type(t){this._type=t,this._createFilter()}getFrequencyResponse(t=128){const e=new Float32Array(t);for(let n=0;n<t;n++){const _=Math.pow(n/t,2)*19980+20;e[n]=_}const s=new Float32Array(t),i=new Float32Array(t);return this._filter.getFrequencyResponse(e,s,i),s}dispose(){return super.dispose(),this.input.dispose(),this.output.dispose(),this._filter.disconnect(),this}}class Z extends c{constructor(){const t=h(Z.getDefaults(),arguments,["delayTime","resonance","dampening"]);super(t),this.name="LowpassCombFilter",this._combFilter=this.output=new $({context:this.context,delayTime:t.delayTime,resonance:t.resonance}),this.delayTime=this._combFilter.delayTime,this.resonance=this._combFilter.resonance,this._lowpass=this.input=new X({context:this.context,frequency:t.dampening,type:"lowpass"}),this._lowpass.connect(this._combFilter)}static getDefaults(){return Object.assign(c.getDefaults(),{dampening:3e3,delayTime:.1,resonance:.5})}get dampening(){return this._lowpass.frequency}set dampening(t){this._lowpass.frequency=t}dispose(){return super.dispose(),this._combFilter.dispose(),this._lowpass.dispose(),this}}class O extends nt{constructor(){const t=h(O.getDefaults(),arguments,["voice","options"]);super(t),this.name="PolySynth",this._availableVoices=[],this._activeVoices=[],this._voices=[],this._gcTimeout=-1,this._averageActiveVoices=0,this._syncedRelease=i=>this.releaseAll(i),d(!dt(t.voice),"DEPRECATED: The polyphony count is no longer the first argument.");const e=t.voice.getDefaults();this.options=Object.assign(e,t.options),this.voice=t.voice,this.maxPolyphony=t.maxPolyphony,this._dummyVoice=this._getNextAvailableVoice();const s=this._voices.indexOf(this._dummyVoice);this._voices.splice(s,1),this._gcTimeout=this.context.setInterval(this._collectGarbage.bind(this),1)}static getDefaults(){return Object.assign(nt.getDefaults(),{maxPolyphony:32,options:{},voice:G})}get activeVoices(){return this._activeVoices.length}_makeVoiceAvailable(t){this._availableVoices.push(t);const e=this._activeVoices.findIndex(s=>s.voice===t);this._activeVoices.splice(e,1)}_getNextAvailableVoice(){if(this._availableVoices.length)return this._availableVoices.shift();if(this._voices.length<this.maxPolyphony){const t=new this.voice(Object.assign(this.options,{context:this.context,onsilence:this._makeVoiceAvailable.bind(this)}));return d(t instanceof W,"Voice must extend Monophonic class"),t.connect(this.output),this._voices.push(t),t}else St("Max polyphony exceeded. Note dropped.")}_collectGarbage(){if(this._averageActiveVoices=Math.max(this._averageActiveVoices*.95,this.activeVoices),this._availableVoices.length&&this._voices.length>Math.ceil(this._averageActiveVoices+1)){const t=this._availableVoices.shift(),e=this._voices.indexOf(t);this._voices.splice(e,1),this.context.isOffline||t.dispose()}}_triggerAttack(t,e,s){t.forEach(i=>{const n=new A(this.context,i).toMidi(),o=this._getNextAvailableVoice();o&&(o.triggerAttack(i,e,s),this._activeVoices.push({midi:n,voice:o,released:!1}),this.log("triggerAttack",i,e))})}_triggerRelease(t,e){t.forEach(s=>{const i=new A(this.context,s).toMidi(),n=this._activeVoices.find(({midi:o,released:_})=>o===i&&!_);n&&(n.voice.triggerRelease(e),n.released=!0,this.log("triggerRelease",s,e))})}_scheduleEvent(t,e,s,i){d(!this.disposed,"Synth was already disposed"),s<=this.now()?t==="attack"?this._triggerAttack(e,s,i):this._triggerRelease(e,s):this.context.setTimeout(()=>{this.disposed||this._scheduleEvent(t,e,s,i)},s-this.now())}triggerAttack(t,e,s){Array.isArray(t)||(t=[t]);const i=this.toSeconds(e);return this._scheduleEvent("attack",t,i,s),this}triggerRelease(t,e){Array.isArray(t)||(t=[t]);const s=this.toSeconds(e);return this._scheduleEvent("release",t,s),this}triggerAttackRelease(t,e,s,i){const n=this.toSeconds(s);if(this.triggerAttack(t,n,i),ot(e)){d(ot(t),"If the duration is an array, the notes must also be an array"),t=t;for(let o=0;o<t.length;o++){const _=e[Math.min(o,e.length-1)],q=this.toSeconds(_);d(q>0,"The duration must be greater than 0"),this.triggerRelease(t[o],n+q)}}else{const o=this.toSeconds(e);d(o>0,"The duration must be greater than 0"),this.triggerRelease(t,n+o)}return this}sync(){return this._syncState()&&(this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",1),this.context.transport.on("stop",this._syncedRelease),this.context.transport.on("pause",this._syncedRelease),this.context.transport.on("loopEnd",this._syncedRelease)),this}set(t){const e=x(t,["onsilence","context"]);return this.options=Et(this.options,e),this._voices.forEach(s=>s.set(e)),this._dummyVoice.set(e),this}get(){return this._dummyVoice.get()}releaseAll(t){const e=this.toSeconds(t);return this._activeVoices.forEach(({voice:s})=>{s.triggerRelease(e)}),this}dispose(){return super.dispose(),this._dummyVoice.dispose(),this._voices.forEach(t=>t.dispose()),this._activeVoices=[],this._availableVoices=[],this.context.clearInterval(this._gcTimeout),this}}class M extends c{constructor(){const t=h(M.getDefaults(),arguments,["fade"]);super(t),this.name="CrossFade",this._panner=this.context.createStereoPanner(),this._split=this.context.createChannelSplitter(2),this._g2a=new Ot({context:this.context}),this.a=new r({context:this.context,gain:0}),this.b=new r({context:this.context,gain:0}),this.output=new r({context:this.context}),this._internalChannels=[this.a,this.b],this.fade=new l({context:this.context,units:"normalRange",value:t.fade}),u(this,"fade"),this.context.getConstant(1).connect(this._panner),this._panner.connect(this._split),this._panner.channelCount=1,this._panner.channelCountMode="explicit",w(this._split,this.a.gain,0),w(this._split,this.b.gain,1),this.fade.chain(this._g2a,this._panner.pan),this.a.connect(this.output),this.b.connect(this.output)}static getDefaults(){return Object.assign(c.getDefaults(),{fade:.5})}dispose(){return super.dispose(),this.a.dispose(),this.b.dispose(),this.output.dispose(),this.fade.dispose(),this._g2a.dispose(),this._panner.disconnect(),this._split.disconnect(),this}}class at extends c{constructor(t){super(t),this.name="Effect",this._dryWet=new M({context:this.context}),this.wet=this._dryWet.fade,this.effectSend=new r({context:this.context}),this.effectReturn=new r({context:this.context}),this.input=new r({context:this.context}),this.output=this._dryWet,this.input.fan(this._dryWet.a,this.effectSend),this.effectReturn.connect(this._dryWet.b),this.wet.setValueAtTime(t.wet,0),this._internalChannels=[this.effectReturn,this.effectSend],u(this,"wet")}static getDefaults(){return Object.assign(c.getDefaults(),{wet:1})}connectEffect(t){return this._internalChannels.push(t),this.effectSend.chain(t,this.effectReturn),this}dispose(){return super.dispose(),this._dryWet.dispose(),this.effectSend.dispose(),this.effectReturn.dispose(),this.wet.dispose(),this}}class ct extends at{constructor(t){super(t),this.name="LFOEffect",this._lfo=new D({context:this.context,frequency:t.frequency,amplitude:t.depth}),this.depth=this._lfo.amplitude,this.frequency=this._lfo.frequency,this.type=t.type,u(this,["frequency","depth"])}static getDefaults(){return Object.assign(at.getDefaults(),{frequency:1,type:"sine",depth:1})}start(t){return this._lfo.start(t),this}stop(t){return this._lfo.stop(t),this}sync(){return this._lfo.sync(),this}unsync(){return this._lfo.unsync(),this}get type(){return this._lfo.type}set type(t){this._lfo.type=t}dispose(){return super.dispose(),this._lfo.dispose(),this.frequency.dispose(),this.depth.dispose(),this}}class J extends ct{constructor(){const t=h(J.getDefaults(),arguments,["frequency","baseFrequency","octaves"]);super(t),this.name="AutoFilter",this.filter=new H(Object.assign(t.filter,{context:this.context})),this.connectEffect(this.filter),this._lfo.connect(this.filter.frequency),this.octaves=t.octaves,this.baseFrequency=t.baseFrequency}static getDefaults(){return Object.assign(ct.getDefaults(),{baseFrequency:200,octaves:2.6,filter:{type:"lowpass",rolloff:-12,Q:1}})}get baseFrequency(){return this._lfo.min}set baseFrequency(t){this._lfo.min=this.toFrequency(t),this.octaves=this._octaves}get octaves(){return this._octaves}set octaves(t){this._octaves=t,this._lfo.max=this._lfo.min*Math.pow(2,t)}dispose(){return super.dispose(),this.filter.dispose(),this}}class C extends c{constructor(){const t=h(C.getDefaults(),arguments,["channels"]);super(t),this.name="Merge",this._merger=this.output=this.input=this.context.createChannelMerger(t.channels)}static getDefaults(){return Object.assign(c.getDefaults(),{channels:2})}dispose(){return super.dispose(),this._merger.disconnect(),this}}class E extends c{constructor(t){super(t),this.name="StereoEffect",this.input=new r({context:this.context}),this.input.channelCount=2,this.input.channelCountMode="explicit",this._dryWet=this.output=new M({context:this.context,fade:t.wet}),this.wet=this._dryWet.fade,this._split=new ft({context:this.context,channels:2}),this._merge=new C({context:this.context,channels:2}),this.input.connect(this._split),this.input.connect(this._dryWet.a),this._merge.connect(this._dryWet.b),u(this,["wet"])}connectEffectLeft(...t){this._split.connect(t[0],0,0),v(...t),w(t[t.length-1],this._merge,0,0)}connectEffectRight(...t){this._split.connect(t[0],1,0),v(...t),w(t[t.length-1],this._merge,0,1)}static getDefaults(){return Object.assign(c.getDefaults(),{wet:1})}dispose(){return super.dispose(),this._dryWet.dispose(),this._split.dispose(),this._merge.dispose(),this}}class Q extends E{constructor(t){super(t),this.feedback=new l({context:this.context,value:t.feedback,units:"normalRange"}),this._feedbackL=new r({context:this.context}),this._feedbackR=new r({context:this.context}),this._feedbackSplit=new ft({context:this.context,channels:2}),this._feedbackMerge=new C({context:this.context,channels:2}),this._merge.connect(this._feedbackSplit),this._feedbackMerge.connect(this._split),this._feedbackSplit.connect(this._feedbackL,0,0),this._feedbackL.connect(this._feedbackMerge,0,0),this._feedbackSplit.connect(this._feedbackR,1,0),this._feedbackR.connect(this._feedbackMerge,0,1),this.feedback.fan(this._feedbackL.gain,this._feedbackR.gain),u(this,["feedback"])}static getDefaults(){return Object.assign(E.getDefaults(),{feedback:.5})}dispose(){return super.dispose(),this.feedback.dispose(),this._feedbackL.dispose(),this._feedbackR.dispose(),this._feedbackSplit.dispose(),this._feedbackMerge.dispose(),this}}class K extends Q{constructor(){const t=h(K.getDefaults(),arguments,["frequency","delayTime","depth"]);super(t),this.name="Chorus",this._depth=t.depth,this._delayTime=t.delayTime/1e3,this._lfoL=new D({context:this.context,frequency:t.frequency,min:0,max:1}),this._lfoR=new D({context:this.context,frequency:t.frequency,min:0,max:1,phase:180}),this._delayNodeL=new f({context:this.context}),this._delayNodeR=new f({context:this.context}),this.frequency=this._lfoL.frequency,u(this,["frequency"]),this._lfoL.frequency.connect(this._lfoR.frequency),this.connectEffectLeft(this._delayNodeL),this.connectEffectRight(this._delayNodeR),this._lfoL.connect(this._delayNodeL.delayTime),this._lfoR.connect(this._delayNodeR.delayTime),this.depth=this._depth,this.type=t.type,this.spread=t.spread}static getDefaults(){return Object.assign(Q.getDefaults(),{frequency:1.5,delayTime:3.5,depth:.7,type:"sine",spread:180,feedback:0,wet:.5})}get depth(){return this._depth}set depth(t){this._depth=t;const e=this._delayTime*t;this._lfoL.min=Math.max(this._delayTime-e,0),this._lfoL.max=this._delayTime+e,this._lfoR.min=Math.max(this._delayTime-e,0),this._lfoR.max=this._delayTime+e}get delayTime(){return this._delayTime*1e3}set delayTime(t){this._delayTime=t/1e3,this.depth=this._depth}get type(){return this._lfoL.type}set type(t){this._lfoL.type=t,this._lfoR.type=t}get spread(){return this._lfoR.phase-this._lfoL.phase}set spread(t){this._lfoL.phase=90-t/2,this._lfoR.phase=t/2+90}start(t){return this._lfoL.start(t),this._lfoR.start(t),this}stop(t){return this._lfoL.stop(t),this._lfoR.stop(t),this}sync(){return this._lfoL.sync(),this._lfoR.sync(),this}unsync(){return this._lfoL.unsync(),this._lfoR.unsync(),this}dispose(){return super.dispose(),this._lfoL.dispose(),this._lfoR.dispose(),this._delayNodeL.dispose(),this._delayNodeR.dispose(),this.frequency.dispose(),this}}const rt=[1557/44100,1617/44100,1491/44100,1422/44100,1277/44100,1356/44100,1188/44100,1116/44100],ht=[225,556,441,341];class L extends E{constructor(){const t=h(L.getDefaults(),arguments,["roomSize","dampening"]);super(t),this.name="Freeverb",this._combFilters=[],this._allpassFiltersL=[],this._allpassFiltersR=[],this.roomSize=new l({context:this.context,value:t.roomSize,units:"normalRange"}),this._allpassFiltersL=ht.map(e=>{const s=this.context.createBiquadFilter();return s.type="allpass",s.frequency.value=e,s}),this._allpassFiltersR=ht.map(e=>{const s=this.context.createBiquadFilter();return s.type="allpass",s.frequency.value=e,s}),this._combFilters=rt.map((e,s)=>{const i=new Z({context:this.context,dampening:t.dampening,delayTime:e});return s<rt.length/2?this.connectEffectLeft(i,...this._allpassFiltersL):this.connectEffectRight(i,...this._allpassFiltersR),this.roomSize.connect(i.resonance),i}),u(this,["roomSize"])}static getDefaults(){return Object.assign(E.getDefaults(),{roomSize:.7,dampening:3e3})}get dampening(){return this._combFilters[0].dampening}set dampening(t){this._combFilters.forEach(e=>e.dampening=t)}dispose(){return super.dispose(),this._allpassFiltersL.forEach(t=>t.disconnect()),this._allpassFiltersR.forEach(t=>t.disconnect()),this._combFilters.forEach(t=>t.dispose()),this.roomSize.dispose(),this}}class lt extends Q{constructor(t){super(t),this._feedbackL.disconnect(),this._feedbackL.connect(this._feedbackMerge,0,1),this._feedbackR.disconnect(),this._feedbackR.connect(this._feedbackMerge,0,0),u(this,["feedback"])}}class Y extends lt{constructor(){const t=h(Y.getDefaults(),arguments,["delayTime","feedback"]);super(t),this.name="PingPongDelay",this._leftDelay=new f({context:this.context,maxDelay:t.maxDelay}),this._rightDelay=new f({context:this.context,maxDelay:t.maxDelay}),this._rightPreDelay=new f({context:this.context,maxDelay:t.maxDelay}),this.delayTime=new l({context:this.context,units:"time",value:t.delayTime}),this.connectEffectLeft(this._leftDelay),this.connectEffectRight(this._rightPreDelay,this._rightDelay),this.delayTime.fan(this._leftDelay.delayTime,this._rightDelay.delayTime,this._rightPreDelay.delayTime),this._feedbackL.disconnect(),this._feedbackL.connect(this._rightDelay),u(this,["delayTime"])}static getDefaults(){return Object.assign(lt.getDefaults(),{delayTime:.25,maxDelay:1})}dispose(){return super.dispose(),this._leftDelay.dispose(),this._rightDelay.dispose(),this._rightPreDelay.dispose(),this.delayTime.dispose(),this}}function Ct(){const a=new J({frequency:".4hz",depth:1}).toDestination(),t=new L({dampening:100,wet:1,roomSize:.98}).connect(a),e=new K({frequency:150,delayTime:13.5,depth:10}).connect(t);return new O(V,{detune:2,volume:-10,oscillator:{type:"fattriangle",spread:20,count:4},envelope:{attack:2,decay:.6,sustain:.7,release:8}}).connect(e)}function j(a,t,e,s){a.triggerAttackRelease(t,e,s)}function Lt(){const a=new L({dampening:300,wet:1,roomSize:.95}).toDestination(),t=new Y({delayTime:"1n.",feedback:.5,wet:.5}).connect(a);return new O(V,{detune:8,volume:-15,oscillator:{type:"triangle",spread:20,count:4},envelope:{attack:.01,decay:.2,sustain:.01,release:4}}).connect(t)}function jt(a,t,e,s){a.triggerAttackRelease(t,e,s)}let T,_t,mt=!0;const gt=["C2","E2"],yt=["C3","E3","G3","A3"],xt=["D4","E4","B4","A4"],bt=["C6","D6","E6","A6","B6","C7","D7","E7"],Nt=["A2"],Pt=["A3","C4","E4","A4"],Wt=["B4","C5","F5","A5"],Gt=["A6","B6","C7","E7","F7","G7"],Qt=["D2","F2"],It=["D3","F3","A3"],zt=["E4","F4","D5"],Bt=["D6","E6","F7","A7","B7","C8"];let m=yt,g=xt,y=gt,b=bt,N=0,P=0;function $t(){T=Ct(),_t=Lt(),R.bpm.value=40,R.start(),R.scheduleRepeat(a=>{P%8===0&&(console.log(P),N++,N%2===0?(console.log("Am"),m=Pt,g=Wt,y=Nt,b=Gt):(console.log("C"),m=yt,g=xt,y=gt,b=bt),N%6===0&&(console.log("Dm"),m=It,g=zt,y=Qt,b=Bt));const t=m[Math.floor(Math.random()*m.length)];j(T,t,"2m",a);const e=g[Math.floor(Math.random()*g.length)];j(T,e,"2m",a);const s=a<200?.3:a<500?.5:.8;if(a>10&&Math.random()<s){const i=y[Math.floor(Math.random()*y.length)];j(T,i,"2m",a)}a>30&&mt&&Ut(),P++},"2m")}function Ut(){mt=!1,R.scheduleRepeat(a=>{const t=a<100?.1:.3;if(!(Math.random()<t))return;const s=b[Math.floor(Math.random()*b.length)];jt(_t,s,"4n",a),Vt()},"4n")}export{$t as initAudio};
